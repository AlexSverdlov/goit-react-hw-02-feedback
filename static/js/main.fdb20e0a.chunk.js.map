{"version":3,"sources":["components/Counter/Statistics/Statistics.js","components/Counter/FeedbackOptions/FeedbackOptions.js","components/Counter/Section.js","components/Counter/Notification.js","components/Counter/Counter.js","App.js","index.js"],"names":["Statistics","this","props","good","neutral","bad","total","positive","React","Component","FeedbackOptions","namePropState","Object","keys","options","map","item","type","name","onClick","onLeaveFeedback","toUpperCase","slice","Section","title","children","Notification","message","Counter","state","handleLeaveFeedback","e","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAeeA,E,4JAZb,WACE,OACE,qCACE,uCAAUC,KAAKC,MAAMC,QACrB,0CAAaF,KAAKC,MAAME,WACxB,sCAASH,KAAKC,MAAMG,OACpB,wCAAWJ,KAAKC,MAAMI,SACtB,oDAAuBL,KAAKC,MAAMK,SAAlC,c,GARiBC,IAAMC,WCyBhBC,E,4JAxBb,WAAU,IAAD,OAODC,EAAgBC,OAAOC,KAAKZ,KAAKC,MAAMY,SAC7C,OACE,mCACGH,EAAcI,KAAI,SAAAC,GAAI,OACrB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAAS,EAAKjB,MAAMkB,gBAJtB,SAMGJ,EAAK,GAAGK,cAAgBL,EAAKM,MAAM,IAL/BN,Y,GAbaR,IAAMC,WCKrBc,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCFUC,EADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCwD3BC,E,4MAlDbC,MAAQ,CACN1B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPyB,oBAAsB,SAAAC,GAAM,IAClBb,EAASa,EAAEC,cAAXd,KACR,EAAKe,UAAS,SAAAC,GACZ,OAAO,eAAGhB,EAAOgB,EAAUhB,GAAQ,O,EAIvCiB,mBAAqB,WACnB,OAAO,EAAKN,MAAM1B,KAAO,EAAK0B,MAAMzB,QAAU,EAAKyB,MAAMxB,K,EAE3D+B,gCAAkC,WAChC,OAAOC,KAAKC,MACS,IAAlB,EAAKT,MAAM1B,MACT,EAAK0B,MAAM1B,KAAO,EAAK0B,MAAMzB,QAAU,EAAKyB,MAAMxB,O,4CAIzD,WACE,OACE,gCACE,cAAC,EAAD,CAASmB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEV,QAASb,KAAK4B,MACdT,gBAAiBnB,KAAK6B,wBAG1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGvB,KAAKkC,qBACJ,cAAC,EAAD,CACEhC,KAAMF,KAAK4B,MAAM1B,KACjBC,QAASH,KAAK4B,MAAMzB,QACpBC,IAAKJ,KAAK4B,MAAMxB,IAChBC,MAAOL,KAAKkC,qBACZ5B,SAAUN,KAAKmC,oCAGjB,cAAC,EAAD,CAAcT,QAAQ,+B,GA3CZnB,IAAMC,W,MCMb8B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fdb20e0a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Statistics extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <p>Good: {this.props.good}</p>\r\n        <p>Neutral: {this.props.neutral}</p>\r\n        <p>Bad: {this.props.bad}</p>\r\n        <p>Total: {this.props.total}</p>\r\n        <p>Positive feedback: {this.props.positive}%</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Statistics;\r\n","import React from 'react';\r\n\r\nclass FeedbackOptions extends React.Component {\r\n  render() {\r\n    //   Массив имен свойств объекта состояния из компонента Counter.\r\n    //   Из них создаем имена для кнопок и для свойства кнопки\r\n    //   name (необходимо для определения по какой кнопке был клик).\r\n    //   Предугадывая вопрос ментора, напоминаю условие задачи -\r\n    //   \"Состояние приложения обязательно должно быть следующего вида, добавлять новые свойства нельзя.\"\r\n\r\n    const namePropState = Object.keys(this.props.options);\r\n    return (\r\n      <>\r\n        {namePropState.map(item => (\r\n          <button\r\n            key={item}\r\n            type=\"button\"\r\n            name={item}\r\n            onClick={this.props.onLeaveFeedback}\r\n          >\r\n            {item[0].toUpperCase() + item.slice(1)}\r\n          </button>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\nexport default Section;\r\n","import React from 'react';\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\n\r\nclass Counter extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  // Функция обработчик события клика на любой кнопке\r\n  handleLeaveFeedback = e => {\r\n    const { name } = e.currentTarget;\r\n    this.setState(prevState => {\r\n      return { [name]: prevState[name] + 1 };\r\n    });\r\n  };\r\n  // Функции вычисления значений, зависящих от состояния\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round(\r\n      (this.state.good * 100) /\r\n        (this.state.good + this.state.neutral + this.state.bad),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.handleLeaveFeedback}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() ? (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positive={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import Counter from './components/Counter/Counter';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}